// Generated by gencpp from file udp2ros/UdpPacket.msg
// DO NOT EDIT!


#ifndef UDP2ROS_MESSAGE_UDPPACKET_H
#define UDP2ROS_MESSAGE_UDPPACKET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace udp2ros
{
template <class ContainerAllocator>
struct UdpPacket_
{
  typedef UdpPacket_<ContainerAllocator> Type;

  UdpPacket_()
    : send_data()
    , len(0)
    , ip()
    , port_num(0)  {
    }
  UdpPacket_(const ContainerAllocator& _alloc)
    : send_data(_alloc)
    , len(0)
    , ip(_alloc)
    , port_num(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _send_data_type;
  _send_data_type send_data;

   typedef uint8_t _len_type;
  _len_type len;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ip_type;
  _ip_type ip;

   typedef uint16_t _port_num_type;
  _port_num_type port_num;





  typedef boost::shared_ptr< ::udp2ros::UdpPacket_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::udp2ros::UdpPacket_<ContainerAllocator> const> ConstPtr;

}; // struct UdpPacket_

typedef ::udp2ros::UdpPacket_<std::allocator<void> > UdpPacket;

typedef boost::shared_ptr< ::udp2ros::UdpPacket > UdpPacketPtr;
typedef boost::shared_ptr< ::udp2ros::UdpPacket const> UdpPacketConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::udp2ros::UdpPacket_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::udp2ros::UdpPacket_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace udp2ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'udp2ros': ['/home/soon/Desktop/catkin_ws/src/udp2ros/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::udp2ros::UdpPacket_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::udp2ros::UdpPacket_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::udp2ros::UdpPacket_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::udp2ros::UdpPacket_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::udp2ros::UdpPacket_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::udp2ros::UdpPacket_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::udp2ros::UdpPacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "38dec323904f12b801c2ff4a100840c9";
  }

  static const char* value(const ::udp2ros::UdpPacket_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x38dec323904f12b8ULL;
  static const uint64_t static_value2 = 0x01c2ff4a100840c9ULL;
};

template<class ContainerAllocator>
struct DataType< ::udp2ros::UdpPacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "udp2ros/UdpPacket";
  }

  static const char* value(const ::udp2ros::UdpPacket_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::udp2ros::UdpPacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string send_data\n\
uint8 len\n\
string ip\n\
uint16 port_num\n\
";
  }

  static const char* value(const ::udp2ros::UdpPacket_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::udp2ros::UdpPacket_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.send_data);
      stream.next(m.len);
      stream.next(m.ip);
      stream.next(m.port_num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UdpPacket_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::udp2ros::UdpPacket_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::udp2ros::UdpPacket_<ContainerAllocator>& v)
  {
    s << indent << "send_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.send_data);
    s << indent << "len: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.len);
    s << indent << "ip: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ip);
    s << indent << "port_num: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.port_num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UDP2ROS_MESSAGE_UDPPACKET_H
